name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: supply_stream_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run tests
        run: npm run test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: supply_stream_test
          JWT_SECRET: test_jwt_secret
  
  build:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      
      - name: Set image tag
        run: |
          if [ "${{ env.BRANCH_NAME }}" = "main" ]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
          fi
      
      - name: Build and push procurement-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/procurement-service
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/procurement-service:${{ env.IMAGE_TAG }}
      
      - name: Build and push auth-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/auth-service
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/auth-service:${{ env.IMAGE_TAG }}
      
      - name: Build and push bidding-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/bidding-service
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/bidding-service:${{ env.IMAGE_TAG }}
      
      - name: Build and push notification-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/notification-service
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/notification-service:${{ env.IMAGE_TAG }}
      
      - name: Build and push analytics-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/analytics-service
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/analytics-service:${{ env.IMAGE_TAG }}
      
      - name: Build and push client-ui
        uses: docker/build-push-action@v4
        with:
          context: ./apps/client-ui
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/client-ui:${{ env.IMAGE_TAG }}
      
      - name: Build and push supplier-ui
        uses: docker/build-push-action@v4
        with:
          context: ./apps/supplier-ui
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/supplier-ui:${{ env.IMAGE_TAG }}
      
      - name: Build and push admin-ui
        uses: docker/build-push-action@v4
        with:
          context: ./apps/admin-ui
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/admin-ui:${{ env.IMAGE_TAG }}
  
  deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      
      - name: Set environment
        run: |
          if [ "${{ env.BRANCH_NAME }}" = "main" ]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi
      
      - name: Deploy to Kubernetes
        run: |
          # Replace placeholders in Kubernetes manifests
          find ./infrastructure/kubernetes -type f -name "*.yaml" -exec sed -i "s|\${ACR_LOGIN_SERVER}|${{ secrets.ACR_LOGIN_SERVER }}|g" {} \;
          find ./infrastructure/kubernetes -type f -name "*.yaml" -exec sed -i "s|\${ENVIRONMENT}|${{ env.ENVIRONMENT }}|g" {} \;
          
          # Apply Kubernetes manifests
          kubectl apply -f ./infrastructure/kubernetes/
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/procurement-service
          kubectl rollout status deployment/auth-service
          kubectl rollout status deployment/bidding-service
          kubectl rollout status deployment/notification-service
          kubectl rollout status deployment/analytics-service
          kubectl rollout status deployment/client-ui
          kubectl rollout status deployment/supplier-ui
          kubectl rollout status deployment/admin-ui
